"""
Django settings for password_manager project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
##### This key should be private
##### before deployment stage key should be handled differently (using environment variables)
SECRET_KEY = 'django-insecure-$cba^(@r5-&+8%mzj(=yew_rs9(a7($d&_$^tz1h04o8ct0yo='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'manager'    ##### add our manager app to the list of our apps
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'password_manager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'password_manager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

"""
#####
generated a private key (in bytes) by running this code separately in terminal:

from cryptography.fernet import Fernet
key = Fernet.generate_key()
key

"""
##### cryptography.Fernet uses both encryption and decryption (symmetric key)
##### This key should be private
##### before deployment stage key should be handled differently (using environment variables)

KEY = b'D3zOQOQJfUQCr3dzPNeKwd5M6r_NEUjJ3bn4id6cpNs='


"""
#####
Reference to : Django_tutorials/15_Django-email-confirm at main Â· pythonlessons/Django_tutorials, 2022
https://github.com/pythonlessons/Django_tutorials/blob/main/15_Django-email-confirm/djang_website/settings.py
email backend.
smtp email setup in reference to django documentation: 
https://docs.djangoproject.com/en/5.2/topics/email/#obtaining-an-instance-of-an-email-backend
"""
##### smtp protocol for sending email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
##### smtp server
##### we used smtp gmail server in this example.
##### other smtp servers like hotmail and Yahoo can be used, but you will have to search the internet to find the host name of those services
EMAIL_HOST = 'smtp.gmail.com'
##### port number for smtp emails
EMAIL_PORT = 587
##### use TLS security protocol
EMAIL_USE_TLS = True
##### time for password reset, account activation, and user authentication link to expire (2 minutes)
PASSWORD_RESET_TIMEOUT= 120

"""
#####
Here it is Very important to enter an email address in the "EMAIL_FROM" AND "EMAIL_HOST_USER" variables.

In the "EMAIL_HOST_PASSWORD" DO NOT ENTER YOUR email account password
instead generate an "app password" for your email account.

apps that dont support 2 step verification are required to enter an app password

steps for generating app password for a google email account:
1- select account and click "Manage your google account"
2- on the left tab click "security"
3- in the "How you sign in to Google" tab select the first option "2-Step Verification"
4- make sure 2-Step Verification is turned on, then go to the bottom and click "app password"
5- create your app password
"""
##### !!!!! IT IS VERY IMPORTANT FOR THESE FIELDS TO BE FILLED CORRECTLY OTHERWISE THE CODE WILL FACE ALOT OF PROBLEMS.
##### sender email
EMAIL_FROM = ''
EMAIL_HOST_USER = ''
##### generated app password of sender email (password should be secret and on)
##### before deployment stage app password should be handled differently (using environment variables)
EMAIL_HOST_PASSWORD = ''
